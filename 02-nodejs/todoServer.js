/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const app = express();
const port = 3000;

const todoList = [];
const todoListUse = [];

app.use(bodyParser.json());

function generateRandomNumber() {
  return (Math.floor(Math.random() * 900) + 100); // Generates a random number between 100 and 999
}


//gets the todoList (GET)
function showTodoList(req, res) {
  res.status(200).send(todoList);
}

//posts a new todo item (POST)
function newTodoItem(req, res) {
  var title = req.body.title;
  var description = req.body.description;
  var id = generateRandomNumber();

  var todo = {
    "title": title,
    "description": description,
    "id": id
  }

  var { id, ...updatedTodo } = todo;
  var { title, description, ...idJson } = todo;

  todoListUse.push(todo);
  todoList.push(updatedTodo);

  res.status(201).send(idJson);

}

//gets a todo item based on its ID (GET)
function showTodoItem(req, res) {
  var id = req.params.id;
  const foundTodo = todoListUse.find((todo) => todo.id === parseInt(id));

  if (foundTodo) {
    var { id, ...newFoundTodo } = foundTodo;
    res.status(200).json(foundTodo);
  } else {
    res.status(404).send('Todo not found');
  }
}

//updates a todo item based on its id (PUT)
function updateTodoItem(req, res) {
  var id = req.params.id;
  const foundTodo = todoListUse.find((todo) => todo.id === parseInt(id));

  if (foundTodo) {
    var targetId = parseInt(id);

    var index = todoListUse.findIndex(obj => obj.id === targetId);

    var title = req.body.title;
    var description = req.body.description;
    
    if (title != null){
      foundTodo.title = title;
      todoList[index].title = title;
    }
    if(description != null){
      foundTodo.description = description;
      todoList[index].description = description;
    }

    res.status(200).send();
  } else {
    res.status(404).send('Todo not found');
  }
}

//to delete a todo item based on its id (DELETE)
function deleteTodoItem(req, res)
{
  var id = req.params.id;
  const foundTodo = todoListUse.find((todo) => todo.id === parseInt(id));

  if (foundTodo) {
    var targetId = parseInt(id);

    var index = todoListUse.findIndex(obj => obj.id === targetId);
    
    todoListUse.splice(index, 1)
    todoList.splice(index, 1);

    res.status(200).send();
  } else {
    res.status(404).send('Todo not found');
  }
}

app.get('/todos', showTodoList);
app.post('/todos', newTodoItem);
app.get('/todos/:id', showTodoItem);
app.put('/todos/:id', updateTodoItem);
app.delete('/todos/:id', deleteTodoItem);

// function started() {
//   console.log(`Example app listening on port ${port}`)
// }

// app.listen(port, started);


module.exports = app;
